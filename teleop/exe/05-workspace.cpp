/**
 * @file 05-workspace.cpp
 * @author Saul Reynolds-Haertle
 * @date July 25, 2013
 * @brief This file demonstrates workspace control running on
 * Krang. It will probably be a workhorse for general tasks, including
 * demonstrations.
 */

// #############################################################################
// #############################################################################
// ### Includes
// #############################################################################
// #############################################################################

#include "cortex.h"

#include <iostream>
#include <iomanip>

#include <robotics/parser/dart_parser/DartLoader.h>
#include <math/UtilsRotation.h>
#include <simulation/World.h>

// #############################################################################
// #############################################################################
// ### Constants
// #############################################################################
// #############################################################################

const char* DAEMON_IDENT = "05-workspace";

// #############################################################################
// #############################################################################
// ### Declarations
// #############################################################################
// #############################################################################

// tricked-out debug print for collections. Prints fixed-point,
// fixed-width, and fixed-precision for perfectly aligned columns and
// no annoying exponents.
#define DISPLAY_VECTOR(VEC) std::cout << std::setw(25) << std::left << #VEC; for(int i = 0; i < VEC.size(); i++) std::cout << std::fixed << std::setw(12) << VEC[i]; std::cout << std::endl;

// state variables for the daemon - one daemon context and one
// hardware object
somatic_d_t daemon_cx;
Krang::Hardware* h;

// #############################################################################
// #############################################################################
// ### Helpers
// #############################################################################
// #############################################################################

// #############################################################################
// #############################################################################
// ### Update
// #############################################################################
// #############################################################################

// #############################################################################
// #############################################################################
// ### Main loop
// #############################################################################
// #############################################################################

void run() {
}

// #############################################################################
// #############################################################################
// ### Startup and shutdown
// #############################################################################
// #############################################################################

void init() {
    // init daemon
    somatic_d_opts_t daemon_opt;
    memset(&daemon_opt, 0, sizeof(daemon_opt)); // zero initialize
    daemon_opt.ident = DAEMON_IDENT;
    somatic_d_init(&daemon_cx, &daemon_opt);

    // init dart
    DartLoader dl;
    simulation::World* world = dl.parseWorld("../../common/scenes/01-World-Robot.urdf");
    assert((world != NULL) && "Could not find the world");
    // krang = world->getSkeleton(0);

    // init hardware
    h = new Krang::Hardware(Krang::Hardware::MODE_ALL, &daemon_cx, world->getSkeleton("Krang"));
}

void destroy() {
}

// #############################################################################
// #############################################################################
// ### Main
// #############################################################################
// #############################################################################

int main(int argc, char* argv[]) {
    init();
    run();
    destroy();
}
