The files 'balance-dump-xxxxx.dat' contain results of experiments performen. To plot the data use
the gnu plot script file 'balance-plots.plg' by typing this on the terminal:
>> gnuplot -e "filename='balance-dump-00021.dat';xstart=5" balance-plots.plg

Description of plots:
- 00042: Tried moving base with joystick while using TH gains the same that come out with 
Q(3,3)=1 and using KD_WH the one which comes out when Q(3,3)=100. The response to joystick
has improved. Position control not employed.

- 00049: Tried to make the system follow a sinusoidal trajectory with amp=1 and freq=1/6
the same gains as tried in 00042. The system refuses to move at all. Only the pendulum oscillates.

- 00050: Tried to make the system follow a sinusoidal trajectory with amp=1 and freq=1/20
the same gains as tried in 00042. The system refuses to move at all. Only the pendulum oscillates
but with a smaller frequency this time (as expected).

- 00051: Repeated the above experiment with a KD_TH gain double the previous (that comes out when
Q(3,3)=500). The system blew up in the balancing mode even before starting the track_sine mode.

- 00052-57: Ignore

- 00058: Experiment to find out the breakaway torque that starts the motion of the system. This is
done by incrementing the reference speed of the wheels in steps. The gains KP_TH and KD_TH are the
same as before KD_TH is three times smaller than before. Postion control (KP_TH) is off.

- 00063: The same experiment as 00050 with gains of 00058

- 00064: The same experiment as 00063 with krang on the cardboard

- 00065: Same as 00064 but with more inflated tires. Pressure changed from 23 psi to 36 psi.

- 00071: I changed the way the trajectories are being gnerated. Previously, the trajectory was a 
sine wave for the velocity reference and the corresponding position reference trajectory. Now, the 
trajectory is a sine wave for position reference with a corresponding velocity reference. This 
means that the intial velocity is 2*pi*f*amplitude, a non-zero value. This causes the initial
push for the wheels required to overcome friction. But, due to friction effects, the net 
displacement over time is positive i.e. the center about which the movement of wheels is taking 
place is shifting forward. This is a typical behavior resulting from friction as can be seen
in literature (see Figure 2 in "Adaptive friction compensation with partially known dynamic 
friction model, Canudas de Wit, 1998").

- 00077: Repetition of the same experiment for recording a video. Also Can started playing
and kicking the system to check out its response.

- 00078: The above experiment is now repeated with position control turned on. The result shows
a different behavior. This time, there is a net displacement of the right wheel in positive
direction and a net displacement of the left wheel in the negative direction. This causes a net
change in the heading direction towards the left. The center center of oscillations of wheels
however remains at the initial position.

- 00080: The above experiment was repeated for taking a video of the above turning behavior
observed. But the turning never happened this time. This time, both the wheels experienced a 
forward drift in the average displacements causing the heading direction to remain fixed.
Also, we put a turning disturbance on the robot but the controller tends to get back to
its initial heading direction over time.

- 00081: The gain for KP_WH in the last experiment was 5.0. I changed it to 10.0. 

- 00082: Same experiment repeated on after 37 hours. The response of wheel pos/vel controller
has changed. This indicates that the results are not repeatable. More observations are needed
to determine the cause of this non-repeatability.

- 00083: Keeping the same gains as above the amplitude of the sinusodial reference 
trajectory is doubled. We see the center is only slightly shifted, while tracking error is
reduced significantly. NOTE: During the eight and ninth positive cycles, a brick had 
obstructed the left wheel. Also, after the track-sine mode was changed to the balcning node,
then joystick was used to bring the robot back to its position.

- 00084: The same experiment is repeated is a clean fashion. Results are not different.

- 00085: Changed KP_WH from 10 to 15. Initially the errors were reduced. But as the centers
of the two wheels started drifting slowly in opposite directions the error profile is 
changing.

- 00086: KP_WH is now 20. Overshoot in the positive direction of position is high while
overshoot in the negative direction of velocity is high

- 00087: Spin Angle and spin speed control added and repeated the above experiment, and now,
there is no spin at all. The robot keeps moving in a straight line. The graph plots
now plot the spin angle and speed too. We see that the robot has been trying to spin left
but was constantly readjusted to stay straight. This explains the drift that was taking
place in the earlier experiments. Now why does this drift take place? This is because
the center of gravity of krang is shifted more towards the left as compared to the right
and so the left wheel's response to the torque on the wheel is slower as compared to the 
right wheel.

- 00088: Sinusoidal reference trajectory for spin angle. Didn't reach full 90 degrees.
And the center of the robot had a net motion towards it's exact right side. This is 
because we see that the x value kept going non-zero from zero and so the robot's center
was steered in the heading direction (that was continuously changing). A video was 
made of this experiment.

- 00089: Cicular trajectory code tried for the first time. Radius of the circle was assumed
to be 60 inches. Time period for one round was assumed to 10 seconds. Trajectories for 
the wheel velocities and positions and robot spin velocity and position were derived. During
the experiment, the robot was started from the center of the room. Using the joystick in 
the balance mode, it was commanded to go to a corner so that we have space for the circular
trajectory. Then as the mode was changed to tracking mode, the robot didn't follow
a neat circle. It rather followed somthing like this:
							 __
					  	|  \
								  \
									|
As in a sharp right turn and then not a very sharp trajectory. Since, it was then about to
hit a table, I braught it back to the balance mode using the joystick. I then
repositioned it back to the corner and stated the program. This time it turned left. This 
was very weird. So before it could hit the wall I stopped the program.
Looking at the diagnostics, it seems that the original errors in the wheel positions caused
by joystick control play a role. The initial values of the position references are taken 
from the previous mode in the program (i.e. the balance mode). If in this mode, the joystick
is used to move the robot around, the values of references and the actual position values
are not the same (look at balance-plot-00089-b). This causes uncertain reference values
of the wheel positions leading to unpredicted behavior.

- 00090: Code changed to make the wheel position references equal to zero as soon as the 
mode is changed to TRACK_SINE mode. Beautiful cirle following took place. Did tracking
twice. The first time over, had to stop it in the middle as the safety rope stretched
a bit too far. The second time over though, full two rounds were done very neatly.

- 00091: Code for generating x-y values online implemented and tried for following
five rounds of circular trajectory. It worked fine.

- 00092: Another run of the above experiment for making a video.
